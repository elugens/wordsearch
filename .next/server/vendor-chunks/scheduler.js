"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/scheduler";
exports.ids = ["vendor-chunks/scheduler"];
exports.modules = {

/***/ "(ssr)/./node_modules/scheduler/cjs/scheduler.development.js":
/*!*************************************************************!*\
  !*** ./node_modules/scheduler/cjs/scheduler.development.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * @license React\n * scheduler.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \n true && function() {\n    function performWorkUntilDeadline() {\n        if (isMessageLoopRunning) {\n            var currentTime = exports.unstable_now();\n            startTime = currentTime;\n            var hasMoreWork = !0;\n            try {\n                a: {\n                    isHostCallbackScheduled = !1;\n                    isHostTimeoutScheduled && (isHostTimeoutScheduled = !1, localClearTimeout(taskTimeoutID), taskTimeoutID = -1);\n                    isPerformingWork = !0;\n                    var previousPriorityLevel = currentPriorityLevel;\n                    try {\n                        b: {\n                            advanceTimers(currentTime);\n                            for(currentTask = peek(taskQueue); null !== currentTask && !(currentTask.expirationTime > currentTime && shouldYieldToHost());){\n                                var callback = currentTask.callback;\n                                if (\"function\" === typeof callback) {\n                                    currentTask.callback = null;\n                                    currentPriorityLevel = currentTask.priorityLevel;\n                                    var continuationCallback = callback(currentTask.expirationTime <= currentTime);\n                                    currentTime = exports.unstable_now();\n                                    if (\"function\" === typeof continuationCallback) {\n                                        currentTask.callback = continuationCallback;\n                                        advanceTimers(currentTime);\n                                        hasMoreWork = !0;\n                                        break b;\n                                    }\n                                    currentTask === peek(taskQueue) && pop(taskQueue);\n                                    advanceTimers(currentTime);\n                                } else pop(taskQueue);\n                                currentTask = peek(taskQueue);\n                            }\n                            if (null !== currentTask) hasMoreWork = !0;\n                            else {\n                                var firstTimer = peek(timerQueue);\n                                null !== firstTimer && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n                                hasMoreWork = !1;\n                            }\n                        }\n                        break a;\n                    } finally{\n                        currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = !1;\n                    }\n                    hasMoreWork = void 0;\n                }\n            } finally{\n                hasMoreWork ? schedulePerformWorkUntilDeadline() : isMessageLoopRunning = !1;\n            }\n        }\n    }\n    function push(heap, node) {\n        var index = heap.length;\n        heap.push(node);\n        a: for(; 0 < index;){\n            var parentIndex = index - 1 >>> 1, parent = heap[parentIndex];\n            if (0 < compare(parent, node)) heap[parentIndex] = node, heap[index] = parent, index = parentIndex;\n            else break a;\n        }\n    }\n    function peek(heap) {\n        return 0 === heap.length ? null : heap[0];\n    }\n    function pop(heap) {\n        if (0 === heap.length) return null;\n        var first = heap[0], last = heap.pop();\n        if (last !== first) {\n            heap[0] = last;\n            a: for(var index = 0, length = heap.length, halfLength = length >>> 1; index < halfLength;){\n                var leftIndex = 2 * (index + 1) - 1, left = heap[leftIndex], rightIndex = leftIndex + 1, right = heap[rightIndex];\n                if (0 > compare(left, last)) rightIndex < length && 0 > compare(right, left) ? (heap[index] = right, heap[rightIndex] = last, index = rightIndex) : (heap[index] = left, heap[leftIndex] = last, index = leftIndex);\n                else if (rightIndex < length && 0 > compare(right, last)) heap[index] = right, heap[rightIndex] = last, index = rightIndex;\n                else break a;\n            }\n        }\n        return first;\n    }\n    function compare(a, b) {\n        var diff = a.sortIndex - b.sortIndex;\n        return 0 !== diff ? diff : a.id - b.id;\n    }\n    function advanceTimers(currentTime) {\n        for(var timer = peek(timerQueue); null !== timer;){\n            if (null === timer.callback) pop(timerQueue);\n            else if (timer.startTime <= currentTime) pop(timerQueue), timer.sortIndex = timer.expirationTime, push(taskQueue, timer);\n            else break;\n            timer = peek(timerQueue);\n        }\n    }\n    function handleTimeout(currentTime) {\n        isHostTimeoutScheduled = !1;\n        advanceTimers(currentTime);\n        if (!isHostCallbackScheduled) if (null !== peek(taskQueue)) isHostCallbackScheduled = !0, requestHostCallback();\n        else {\n            var firstTimer = peek(timerQueue);\n            null !== firstTimer && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n        }\n    }\n    function shouldYieldToHost() {\n        return exports.unstable_now() - startTime < frameInterval ? !1 : !0;\n    }\n    function requestHostCallback() {\n        isMessageLoopRunning || (isMessageLoopRunning = !0, schedulePerformWorkUntilDeadline());\n    }\n    function requestHostTimeout(callback, ms) {\n        taskTimeoutID = localSetTimeout(function() {\n            callback(exports.unstable_now());\n        }, ms);\n    }\n    \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && \"function\" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());\n    exports.unstable_now = void 0;\n    if (\"object\" === typeof performance && \"function\" === typeof performance.now) {\n        var localPerformance = performance;\n        exports.unstable_now = function() {\n            return localPerformance.now();\n        };\n    } else {\n        var localDate = Date, initialTime = localDate.now();\n        exports.unstable_now = function() {\n            return localDate.now() - initialTime;\n        };\n    }\n    var taskQueue = [], timerQueue = [], taskIdCounter = 1, currentTask = null, currentPriorityLevel = 3, isPerformingWork = !1, isHostCallbackScheduled = !1, isHostTimeoutScheduled = !1, localSetTimeout = \"function\" === typeof setTimeout ? setTimeout : null, localClearTimeout = \"function\" === typeof clearTimeout ? clearTimeout : null, localSetImmediate = \"undefined\" !== typeof setImmediate ? setImmediate : null, isMessageLoopRunning = !1, taskTimeoutID = -1, frameInterval = 5, startTime = -1;\n    if (\"function\" === typeof localSetImmediate) var schedulePerformWorkUntilDeadline = function() {\n        localSetImmediate(performWorkUntilDeadline);\n    };\n    else if (\"undefined\" !== typeof MessageChannel) {\n        var channel = new MessageChannel(), port = channel.port2;\n        channel.port1.onmessage = performWorkUntilDeadline;\n        schedulePerformWorkUntilDeadline = function() {\n            port.postMessage(null);\n        };\n    } else schedulePerformWorkUntilDeadline = function() {\n        localSetTimeout(performWorkUntilDeadline, 0);\n    };\n    exports.unstable_IdlePriority = 5;\n    exports.unstable_ImmediatePriority = 1;\n    exports.unstable_LowPriority = 4;\n    exports.unstable_NormalPriority = 3;\n    exports.unstable_Profiling = null;\n    exports.unstable_UserBlockingPriority = 2;\n    exports.unstable_cancelCallback = function(task) {\n        task.callback = null;\n    };\n    exports.unstable_continueExecution = function() {\n        isHostCallbackScheduled || isPerformingWork || (isHostCallbackScheduled = !0, requestHostCallback());\n    };\n    exports.unstable_forceFrameRate = function(fps) {\n        0 > fps || 125 < fps ? console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\") : frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5;\n    };\n    exports.unstable_getCurrentPriorityLevel = function() {\n        return currentPriorityLevel;\n    };\n    exports.unstable_getFirstCallbackNode = function() {\n        return peek(taskQueue);\n    };\n    exports.unstable_next = function(eventHandler) {\n        switch(currentPriorityLevel){\n            case 1:\n            case 2:\n            case 3:\n                var priorityLevel = 3;\n                break;\n            default:\n                priorityLevel = currentPriorityLevel;\n        }\n        var previousPriorityLevel = currentPriorityLevel;\n        currentPriorityLevel = priorityLevel;\n        try {\n            return eventHandler();\n        } finally{\n            currentPriorityLevel = previousPriorityLevel;\n        }\n    };\n    exports.unstable_pauseExecution = function() {};\n    exports.unstable_requestPaint = function() {};\n    exports.unstable_runWithPriority = function(priorityLevel, eventHandler) {\n        switch(priorityLevel){\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n                break;\n            default:\n                priorityLevel = 3;\n        }\n        var previousPriorityLevel = currentPriorityLevel;\n        currentPriorityLevel = priorityLevel;\n        try {\n            return eventHandler();\n        } finally{\n            currentPriorityLevel = previousPriorityLevel;\n        }\n    };\n    exports.unstable_scheduleCallback = function(priorityLevel, callback, options) {\n        var currentTime = exports.unstable_now();\n        \"object\" === typeof options && null !== options ? (options = options.delay, options = \"number\" === typeof options && 0 < options ? currentTime + options : currentTime) : options = currentTime;\n        switch(priorityLevel){\n            case 1:\n                var timeout = -1;\n                break;\n            case 2:\n                timeout = 250;\n                break;\n            case 5:\n                timeout = 1073741823;\n                break;\n            case 4:\n                timeout = 1e4;\n                break;\n            default:\n                timeout = 5e3;\n        }\n        timeout = options + timeout;\n        priorityLevel = {\n            id: taskIdCounter++,\n            callback: callback,\n            priorityLevel: priorityLevel,\n            startTime: options,\n            expirationTime: timeout,\n            sortIndex: -1\n        };\n        options > currentTime ? (priorityLevel.sortIndex = options, push(timerQueue, priorityLevel), null === peek(taskQueue) && priorityLevel === peek(timerQueue) && (isHostTimeoutScheduled ? (localClearTimeout(taskTimeoutID), taskTimeoutID = -1) : isHostTimeoutScheduled = !0, requestHostTimeout(handleTimeout, options - currentTime))) : (priorityLevel.sortIndex = timeout, push(taskQueue, priorityLevel), isHostCallbackScheduled || isPerformingWork || (isHostCallbackScheduled = !0, requestHostCallback()));\n        return priorityLevel;\n    };\n    exports.unstable_shouldYield = shouldYieldToHost;\n    exports.unstable_wrapCallback = function(callback) {\n        var parentPriorityLevel = currentPriorityLevel;\n        return function() {\n            var previousPriorityLevel = currentPriorityLevel;\n            currentPriorityLevel = parentPriorityLevel;\n            try {\n                return callback.apply(this, arguments);\n            } finally{\n                currentPriorityLevel = previousPriorityLevel;\n            }\n        };\n    };\n    \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && \"function\" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/scheduler/cjs/scheduler.development.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/scheduler/index.js":
/*!*****************************************!*\
  !*** ./node_modules/scheduler/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/scheduler.development.js */ \"(ssr)/./node_modules/scheduler/cjs/scheduler.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLHlJQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dvcmRzZWFyY2gvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzP2M3Y2MiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/scheduler/index.js\n");

/***/ })

};
;