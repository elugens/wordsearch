/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/unicode-trie";
exports.ids = ["vendor-chunks/unicode-trie"];
exports.modules = {

/***/ "(ssr)/./node_modules/unicode-trie/index.js":
/*!********************************************!*\
  !*** ./node_modules/unicode-trie/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const inflate = __webpack_require__(/*! tiny-inflate */ \"(ssr)/./node_modules/tiny-inflate/index.js\");\nconst { swap32LE } = __webpack_require__(/*! ./swap */ \"(ssr)/./node_modules/unicode-trie/swap.js\");\n// Shift size for getting the index-1 table offset.\nconst SHIFT_1 = 6 + 5;\n// Shift size for getting the index-2 table offset.\nconst SHIFT_2 = 5;\n// Difference between the two shift sizes,\n// for getting an index-1 offset from an index-2 offset. 6=11-5\nconst SHIFT_1_2 = SHIFT_1 - SHIFT_2;\n// Number of index-1 entries for the BMP. 32=0x20\n// This part of the index-1 table is omitted from the serialized form.\nconst OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;\n// Number of entries in an index-2 block. 64=0x40\nconst INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;\n// Mask for getting the lower bits for the in-index-2-block offset. */\nconst INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;\n// Shift size for shifting left the index array values.\n// Increases possible data size with 16-bit index values at the cost\n// of compactability.\n// This requires data blocks to be aligned by DATA_GRANULARITY.\nconst INDEX_SHIFT = 2;\n// Number of entries in a data block. 32=0x20\nconst DATA_BLOCK_LENGTH = 1 << SHIFT_2;\n// Mask for getting the lower bits for the in-data-block offset.\nconst DATA_MASK = DATA_BLOCK_LENGTH - 1;\n// The part of the index-2 table for U+D800..U+DBFF stores values for\n// lead surrogate code _units_ not code _points_.\n// Values for lead surrogate code _points_ are indexed with this portion of the table.\n// Length=32=0x20=0x400>>SHIFT_2. (There are 1024=0x400 lead surrogates.)\nconst LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;\nconst LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;\n// Count the lengths of both BMP pieces. 2080=0x820\nconst INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;\n// The 2-byte UTF-8 version of the index-2 table follows at offset 2080=0x820.\n// Length 32=0x20 for lead bytes C0..DF, regardless of SHIFT_2.\nconst UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;\nconst UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6; // U+0800 is the first code point after 2-byte UTF-8\n// The index-1 table, only used for supplementary code points, at offset 2112=0x840.\n// Variable length, for code points up to highStart, where the last single-value range starts.\n// Maximum length 512=0x200=0x100000>>SHIFT_1.\n// (For 0x100000 supplementary code points U+10000..U+10ffff.)\n//\n// The part of the index-2 table for supplementary code points starts\n// after this index-1 table.\n//\n// Both the index-1 table and the following part of the index-2 table\n// are omitted completely if there is only BMP data.\nconst INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;\n// The alignment size of a data block. Also the granularity for compaction.\nconst DATA_GRANULARITY = 1 << INDEX_SHIFT;\nclass UnicodeTrie {\n    constructor(data){\n        const isBuffer = typeof data.readUInt32BE === \"function\" && typeof data.slice === \"function\";\n        if (isBuffer || data instanceof Uint8Array) {\n            // read binary format\n            let uncompressedLength;\n            if (isBuffer) {\n                this.highStart = data.readUInt32LE(0);\n                this.errorValue = data.readUInt32LE(4);\n                uncompressedLength = data.readUInt32LE(8);\n                data = data.slice(12);\n            } else {\n                const view = new DataView(data.buffer);\n                this.highStart = view.getUint32(0, true);\n                this.errorValue = view.getUint32(4, true);\n                uncompressedLength = view.getUint32(8, true);\n                data = data.subarray(12);\n            }\n            // double inflate the actual trie data\n            data = inflate(data, new Uint8Array(uncompressedLength));\n            data = inflate(data, new Uint8Array(uncompressedLength));\n            // swap bytes from little-endian\n            swap32LE(data);\n            this.data = new Uint32Array(data.buffer);\n        } else {\n            // pre-parsed data\n            ({ data: this.data, highStart: this.highStart, errorValue: this.errorValue } = data);\n        }\n    }\n    get(codePoint) {\n        let index;\n        if (codePoint < 0 || codePoint > 0x10ffff) {\n            return this.errorValue;\n        }\n        if (codePoint < 0xd800 || codePoint > 0xdbff && codePoint <= 0xffff) {\n            // Ordinary BMP code point, excluding leading surrogates.\n            // BMP uses a single level lookup.  BMP index starts at offset 0 in the index.\n            // data is stored in the index array itself.\n            index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n            return this.data[index];\n        }\n        if (codePoint <= 0xffff) {\n            // Lead Surrogate Code Point.  A Separate index section is stored for\n            // lead surrogate code units and code points.\n            //   The main index has the code unit data.\n            //   For this function, we need the code point data.\n            index = (this.data[LSCP_INDEX_2_OFFSET + (codePoint - 0xd800 >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n            return this.data[index];\n        }\n        if (codePoint < this.highStart) {\n            // Supplemental code point, use two-level lookup.\n            index = this.data[INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH + (codePoint >> SHIFT_1)];\n            index = this.data[index + (codePoint >> SHIFT_2 & INDEX_2_MASK)];\n            index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);\n            return this.data[index];\n        }\n        return this.data[this.data.length - DATA_GRANULARITY];\n    }\n}\nmodule.exports = UnicodeTrie;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/unicode-trie/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/unicode-trie/swap.js":
/*!*******************************************!*\
  !*** ./node_modules/unicode-trie/swap.js ***!
  \*******************************************/
/***/ ((module) => {

eval("const isBigEndian = new Uint8Array(new Uint32Array([\n    0x12345678\n]).buffer)[0] === 0x12;\nconst swap = (b, n, m)=>{\n    let i = b[n];\n    b[n] = b[m];\n    b[m] = i;\n};\nconst swap32 = (array)=>{\n    const len = array.length;\n    for(let i = 0; i < len; i += 4){\n        swap(array, i, i + 3);\n        swap(array, i + 1, i + 2);\n    }\n};\nconst swap32LE = (array)=>{\n    if (isBigEndian) {\n        swap32(array);\n    }\n};\nmodule.exports = {\n    swap32LE: swap32LE\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93b3Jkc2VhcmNoLy4vbm9kZV9tb2R1bGVzL3VuaWNvZGUtdHJpZS9zd2FwLmpzPzhkY2QiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaXNCaWdFbmRpYW4gPSAobmV3IFVpbnQ4QXJyYXkobmV3IFVpbnQzMkFycmF5KFsweDEyMzQ1Njc4XSkuYnVmZmVyKVswXSA9PT0gMHgxMik7XG5cbmNvbnN0IHN3YXAgPSAoYiwgbiwgbSkgPT4ge1xuICBsZXQgaSA9IGJbbl07XG4gIGJbbl0gPSBiW21dO1xuICBiW21dID0gaTtcbn07XG5cbmNvbnN0IHN3YXAzMiA9IGFycmF5ID0+IHtcbiAgY29uc3QgbGVuID0gYXJyYXkubGVuZ3RoO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcChhcnJheSwgaSwgaSArIDMpO1xuICAgIHN3YXAoYXJyYXksIGkgKyAxLCBpICsgMik7XG4gIH1cbn07XG5cbmNvbnN0IHN3YXAzMkxFID0gYXJyYXkgPT4ge1xuICBpZiAoaXNCaWdFbmRpYW4pIHtcbiAgICBzd2FwMzIoYXJyYXkpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3dhcDMyTEU6IHN3YXAzMkxFXG59O1xuIl0sIm5hbWVzIjpbImlzQmlnRW5kaWFuIiwiVWludDhBcnJheSIsIlVpbnQzMkFycmF5IiwiYnVmZmVyIiwic3dhcCIsImIiLCJuIiwibSIsImkiLCJzd2FwMzIiLCJhcnJheSIsImxlbiIsImxlbmd0aCIsInN3YXAzMkxFIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsY0FBZSxJQUFJQyxXQUFXLElBQUlDLFlBQVk7SUFBQztDQUFXLEVBQUVDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsS0FBSztBQUVqRixNQUFNQyxPQUFPLENBQUNDLEdBQUdDLEdBQUdDO0lBQ2xCLElBQUlDLElBQUlILENBQUMsQ0FBQ0MsRUFBRTtJQUNaRCxDQUFDLENBQUNDLEVBQUUsR0FBR0QsQ0FBQyxDQUFDRSxFQUFFO0lBQ1hGLENBQUMsQ0FBQ0UsRUFBRSxHQUFHQztBQUNUO0FBRUEsTUFBTUMsU0FBU0MsQ0FBQUE7SUFDYixNQUFNQyxNQUFNRCxNQUFNRSxNQUFNO0lBQ3hCLElBQUssSUFBSUosSUFBSSxHQUFHQSxJQUFJRyxLQUFLSCxLQUFLLEVBQUc7UUFDL0JKLEtBQUtNLE9BQU9GLEdBQUdBLElBQUk7UUFDbkJKLEtBQUtNLE9BQU9GLElBQUksR0FBR0EsSUFBSTtJQUN6QjtBQUNGO0FBRUEsTUFBTUssV0FBV0gsQ0FBQUE7SUFDZixJQUFJVixhQUFhO1FBQ2ZTLE9BQU9DO0lBQ1Q7QUFDRjtBQUVBSSxPQUFPQyxPQUFPLEdBQUc7SUFDZkYsVUFBVUE7QUFDWiIsImZpbGUiOiIoc3NyKS8uL25vZGVfbW9kdWxlcy91bmljb2RlLXRyaWUvc3dhcC5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/unicode-trie/swap.js\n");

/***/ })

};
;