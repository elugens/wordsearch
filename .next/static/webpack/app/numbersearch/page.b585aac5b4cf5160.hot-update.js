"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/numbersearch/page",{

/***/ "(app-pages-browser)/./src/lib/numberSearchGenerator.ts":
/*!******************************************!*\
  !*** ./src/lib/numberSearchGenerator.ts ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateNumberSearch: function() { return /* binding */ generateNumberSearch; }\n/* harmony export */ });\nfunction generateRandomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nfunction generateEquation(targetNumber, complexity) {\n    switch(complexity){\n        case \"easy\":\n            // Simple addition or subtraction\n            if (Math.random() > 0.5 && targetNumber > 2) {\n                const num1 = generateRandomNumber(1, targetNumber - 1);\n                return {\n                    equation: \"\".concat(num1, \" + \").concat(targetNumber - num1, \" =\"),\n                    result: targetNumber\n                };\n            } else {\n                const num1 = generateRandomNumber(targetNumber + 1, targetNumber + 10);\n                return {\n                    equation: \"\".concat(num1, \" - \").concat(num1 - targetNumber, \" =\"),\n                    result: targetNumber\n                };\n            }\n        case \"medium\":\n            // Multiplication or division\n            if (Math.random() > 0.5) {\n                const factor = generateRandomNumber(2, 5);\n                return {\n                    equation: \"\".concat(targetNumber, \" \\xd7 \").concat(factor, \" =\"),\n                    result: targetNumber * factor\n                };\n            } else {\n                const factor = generateRandomNumber(2, 5);\n                const product = targetNumber * factor;\n                return {\n                    equation: \"\".concat(product, \" \\xf7 \").concat(factor, \" =\"),\n                    result: targetNumber\n                };\n            }\n        case \"hard\":\n            // Mixed operations\n            const operations = [\n                \"+\",\n                \"-\",\n                \"\\xd7\"\n            ];\n            const op = operations[Math.floor(Math.random() * operations.length)];\n            const num1 = generateRandomNumber(1, 10);\n            const num2 = generateRandomNumber(1, 10);\n            switch(op){\n                case \"+\":\n                    return {\n                        equation: \"(\".concat(num1, \" \\xd7 \").concat(num2, \") + \").concat(targetNumber - num1 * num2, \" =\"),\n                        result: targetNumber\n                    };\n                case \"-\":\n                    return {\n                        equation: \"(\".concat(num1, \" \\xd7 \").concat(num2, \") - \").concat(num1 * num2 - targetNumber, \" =\"),\n                        result: targetNumber\n                    };\n                case \"\\xd7\":\n                    if (targetNumber % num1 === 0) {\n                        return {\n                            equation: \"\".concat(targetNumber / num1, \" \\xd7 \").concat(num1, \" =\"),\n                            result: targetNumber\n                        };\n                    } else {\n                        return {\n                            equation: \"\".concat(num1, \" \\xd7 \").concat(num2, \" + \").concat(targetNumber - num1 * num2, \" =\"),\n                            result: targetNumber\n                        };\n                    }\n            }\n    }\n    // Fallback simple equation\n    return {\n        equation: \"? = \".concat(targetNumber),\n        result: targetNumber\n    };\n}\nfunction canPlaceNumber(grid, number, row, col, direction) {\n    const numLength = number.length;\n    const [dRow, dCol] = direction;\n    const size = grid.length;\n    // Check if the number fits within the grid bounds\n    if (row + dRow * (numLength - 1) >= size || row + dRow * (numLength - 1) < 0 || col + dCol * (numLength - 1) >= size || col + dCol * (numLength - 1) < 0) {\n        return false;\n    }\n    // Check if the cells are empty\n    for(let i = 0; i < numLength; i++){\n        if (grid[row + dRow * i][col + dCol * i] !== \"\") {\n            return false;\n        }\n    }\n    return true;\n}\nfunction placeNumber(grid, number, row, col, direction) {\n    const [dRow, dCol] = direction;\n    const digits = number.split(\"\");\n    digits.forEach((digit, i)=>{\n        grid[row + dRow * i][col + dCol * i] = digit;\n    });\n}\nfunction getDirections(complexity) {\n    const directions = [\n        [\n            0,\n            1\n        ],\n        [\n            1,\n            0\n        ]\n    ];\n    if (complexity === \"medium\" || complexity === \"hard\") {\n        directions.push([\n            1,\n            1\n        ], [\n            -1,\n            1\n        ] // diagonal up-right\n        );\n    }\n    return directions;\n}\nfunction generateNumberSearch(param) {\n    let { size = 15, minNumber = 1, maxNumber = 999, numbersToFind = 8, complexity = \"medium\", includeEquations = false } = param;\n    // Initialize empty grid\n    const grid = Array(size).fill(null).map(()=>Array(size).fill(\"\"));\n    // Generate random numbers\n    const numbers = [];\n    const equations = [];\n    while(numbers.length < numbersToFind){\n        const num = generateRandomNumber(minNumber, maxNumber);\n        if (!numbers.includes(num)) {\n            numbers.push(num);\n            if (includeEquations) {\n                equations.push(generateEquation(num, complexity));\n            }\n        }\n    }\n    // Sort numbers for consistent difficulty\n    numbers.sort((a, b)=>b.toString().length - a.toString().length);\n    const directions = getDirections(complexity);\n    // Place numbers in the grid\n    numbers.forEach((number)=>{\n        const numStr = number.toString();\n        let placed = false;\n        let attempts = 0;\n        const maxAttempts = size * size;\n        while(!placed && attempts < maxAttempts){\n            const row = Math.floor(Math.random() * size);\n            const col = Math.floor(Math.random() * size);\n            const direction = directions[Math.floor(Math.random() * directions.length)];\n            if (canPlaceNumber(grid, numStr, row, col, direction)) {\n                placeNumber(grid, numStr, row, col, direction);\n                placed = true;\n            }\n            attempts++;\n        }\n        if (!placed) {\n            console.warn(\"Could not place number \".concat(number));\n        }\n    });\n    // Fill empty cells with random digits\n    for(let i = 0; i < size; i++){\n        for(let j = 0; j < size; j++){\n            if (grid[i][j] === \"\") {\n                grid[i][j] = Math.floor(Math.random() * 10).toString();\n            }\n        }\n    }\n    return {\n        grid,\n        numbers,\n        equations: includeEquations ? equations : undefined\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/numberSearchGenerator.ts\n"));

/***/ })

});